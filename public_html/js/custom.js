
/*
 * Used to update the solar display found inside the footer of the page, this
 * function rounds up so we always start at 1%
 * @param {type} todaysWatts The total wattage generated today
 * @param {type} elemID the element id which is to be updated
 * @returns {undefined}
 */
function updateSolarDisplay(todaysWatts, elemID) {
    var elem = document.getElementById(elemID);
    var dailyUsage = 356000;//Farmer Cooksey should change this to whatever his sensors wattage takes
    var percentageOfGoal = (todaysWatts / dailyUsage) * 100;
    var percent = 1;
    var id = setInterval(frame, 10);
    function frame() {
        if (percent >= percentageOfGoal) {
            clearInterval(id);
        } else {
            percent++;
            elem.innerHTML = 'We have generated ' + percent * 1 + '% of our daily usage! <br>Total Generated: '+todaysWatts+' Watts<br>Daily Usage: '+dailyUsage+' Watts';
        }
    }
}

/*
 * Used to update the solar display element if a problem is found getting the data.
 * @param {string} message the message to be displayed
 * @param {string} elemID the element ID to display the message within
 * @returns {undefined}
 */
function warningSolarDisplay(message, elemID) {
    var elem = document.getElementById(elemID);
    elem.innerHTML = message;
}

/*
 * Ajax call that then sums the total wattage generated by the solar panel ID 
 * provided, later updates the footer display with these values.
 * @param {type} sensorID The sensorID we are gathering data for
 * @returns {undefined}
 */
function getSolarData(sensorID) {
    var outsideSolar = getSensorDataAjax(sensorID, "minute");
    $.when(outsideSolar).then(function (osData) {
        var sumWatts = 0;
        if (osData.solar_value.length > 0) {
            for (var i = 0; i < osData.solar_value.length - 1; i++) {
                sumWatts = sumWatts + osData.solar_value[i][1];
            }
            updateSolarDisplay(sumWatts, sensorID);
        } else {
            warningSolarDisplay("We encountered a problem getting the solar data, retrying..", sensorID);
        }
    }, function (error) {
        console.log(error);
    });
}

/*
 * Function to handle email responses and create appropriate toast responses
 * if required
 * @param {HTTP response} data converted to JSON and then check for errors
 * @returns {undefined}
 */
function handleEmailResponse(data) {
    data = JSON.parse(data);
    if (data.errors) {
        //Errors occurred sending email, alert farmer.
        Materialize.toast(data.errors, 4000, 'rounded materialize-red');
    } else if (data.noemailsent) {
        //We did not send an email, no action needed.
    } else {
        //email was sent successfully, alert farmer.
        Materialize.toast(data.success, 2000, 'rounded materialize-green');
    }
}

/**
 * Sends a single message to emailHandler which is then emailed on to the farmer,
 * Outputs a Toast message alerting the user as to when an email has been sent
 * depending on whether the email sent successfully or not (error or success),
 * Toast is not output if sensorID has recently been sent in an email
 * @param {string} subject The subject to be used within the email
 * @param {string} message The message body string to be used within the email
 * @param {string} sensorID The sensorID if one is required
 * @return {undefined}
 */

function sendEmail(subject, message, sensorID) {
    $.ajax({
        url: "php\\emailHandler.php",
        type: "POST",
        data: {"subject": subject, "message": message, "sensorID": sensorID}
    }).done(function (data) {
        handleEmailResponse(data);
    }).fail(function () {
        alert("Server failure sending email!");
    });
}

/**
 * NOTE: this means these are hard coded, although this may be acceptable
 * given how often sensors would change. We could make this dynamic with 
 * another ajax call to swagger/sites however
 * 
 * Takes in the siteID, generally provided from the device JSON,
 * then translates it into a formatted string to be returned.
 * @param {String} The id of the site e.g "gh1"
 * @return {String} The formatted Name of the site e.g "Green House 1"
 */

function translateSiteIDToString(siteID) {
    var site = "";
    switch (siteID) {
        case "gh1":
            site = "Green House 1";
            break;
        case "gh2":
            site = "Green House 2";
            break;
        case "gh3":
            site = "Green House 3";
            break;
        case "outside":
            site = "Outdoor Beds";
            break;
        case "house":
            site = "Main House";
            break;
        default :
            site = "Unknown";
            break;
    }
    return site;
}

/**
 * Formats the elementID provided with the apprioriate smoke warning to be 
 * displayed as a warning to the user, including the site name and the warning
 * @param {type} siteID
 * @param {type} elementID
 * @param {type} message
 * @param {type} timestamp
 * @returns {undefined}
 */
function addSmokeDangerToElement(siteID, elementID, message, timestamp) {
    var siteName = translateSiteIDToString(siteID);
    $("#" + elementID).html(siteName + "<br>" + message + "<br>" + timestamp);
    $("#" + elementID).removeClass("normal");
    $("#" + elementID).removeClass("warning");
    $("#" + elementID).addClass("danger");
}
/*
 * Formats the elementID provided with the apprioriate smoke warning to be 
 * displayed as a warning to the user, including the site name and the warning
 * itself, removes unecessary classes such as normal also.
 * @param {string} siteID
 * @param {string} elementID
 * @param {string} message
 * @param {string} timestamp
 * @returns {undefined}
 */
function addSmokeWarningToElement(siteID, elementID, message, timestamp) {
    var siteName = translateSiteIDToString(siteID);
    $("#" + elementID).html(siteName + "<br>" + message + "<br>" + timestamp);
    $("#" + elementID).removeClass("normal");
    $("#" + elementID).addClass("warning");
}
/**
 * Formats the elementID provided with the appropriate smoke message to be 
 * displayed as to the user, including the site name and the all clear message
 * @param {type} siteID
 * @param {type} elementID
 * @param {type} timeStamp
 * @returns {undefined}
 */

function addSmokeAllClearToElement(siteID, elementID, timeStamp) {
    var siteName = translateSiteIDToString(siteID);
    $("#" + elementID).html(siteName + ": No Smoke detected.<br>Last Checked: " + timeStamp);
    $("#" + elementID).addClass("normal");
}


function getSensorDataAjax(sensorId, rate) {
    var url = "http://shed.kent.ac.uk/device/" + sensorId + "/" + rate;
    return $.ajax({
        url: url,
        type: "GET"
    });
}

/*
 * Primary function used in dealing with gas sensor readings, detected the ppm
 * of gas within a reading and then handles in multiple different ways depending
 * upon the ppm levels, from disregarding to emailing
 * @param {string} siteID the ID of the site the sensor is located within
 * @param {string} sensorID the ID of the sensor with the readings
 * @param {string} readingValue
 * @param {string} timeStamp
 * @returns {undefined}
 */

function assessThreatGasReadings(siteID, sensorID, readingValue, timeStamp) {
    var siteName = translateSiteIDToString(siteID);
    if (readingValue === null) {
        addSmokeWarningToElement(siteID, sensorID, "Sensor has sent us an inaccurate reading, retrying..", toShortDateString(timeStamp));
    } else if (readingValue < 200) {
        //Too small to be an accurate reading
        addSmokeAllClearToElement(siteID, sensorID, toShortDateString(timeStamp));
    } else if (readingValue < 1000) {
        addSmokeWarningToElement(siteID, sensorID, "Some smoke detected, consider opening a window.", toShortDateString(timeStamp));
    } else if (readingValue < 2000) {
        addSmokeDangerToElement(siteID, sensorID, "Large Co2 quantity detected, please open doors and windows now.", toShortDateString(timeStamp));
    } else if (readingValue < 5000) {
        addSmokeDangerToElement(siteID, sensorID, "Workplace Co2 exposure limit reached, do not stay in this area for longer than 8 hours!", toShortDateString(timeStamp));
    } else if (readingValue < 10000) {
        addSmokeDangerToElement(siteID, sensorID, "Evacuate the area now, deadly Co2 levels detected!", toShortDateString(timeStamp));
        Materialize.toast("Warning: Deadly Co2 levels detected in " + siteName, 60000 * 24, 'rounded materialize-red');
        sendEmail("FIRE DETECTED IN " + siteName, "There is likely a fire in " + siteName + "! Please evacuate the area!", null);
        //I would have also called the fire brigade at this point
    } else if (readingValue > 10000) {
        //This value is above the sensors effective range of 200-10k ppm, likely in error
        addSmokeWarningToElement(siteID, sensorID, "Sensor has sent us a faulty reading, retrying..", toShortDateString(timeStamp));
        sendEmail("Faulty Smoke Sensor in " + siteName, "The Gas sensor in " + siteName + " is producing erroneous readings, please investigate.", sensorID);
    }
}


/**
 * Takes in a specific Gas Sensor ID, gets its latest reading, and then 
 * determines how to display that reading depending on whether it is greater 
 * than 0, greater than 0 means a smoke threat has been detected.
 * @param {String} sensorID the sensor's ID we are checking for
 * @return {undefined}
 */
function checkLatestGasSensorReading(sensorID) {
    var url = "http://shed.kent.ac.uk/device/" + sensorID + "/minute";
    $.ajax({
        url: url,
        type: "GET"
    }).done(function (data) {
        assessThreatGasReadings(data.site_id, sensorID, data.gas_values[data.gas_values.length - 1][1], new Date(data.gas_values[data.gas_values.length - 1][0]));
    }).fail(function () {
        alert("checkLatestGasSensorReading Failed");
    });
}



function checkHydrometerSensors() {
    $.ajax({
        url: "http://shed.kent.ac.uk/devices",
        type: "GET"
    }).done(function (data) {
        data.hydrometer.forEach(checkHydrometerLast60Mins);
    }).fail(function () {
        alert("checkGasSensors Failed");
    });
}


/**
 * This starts the checking of gas sensors, first we need to get the IDs 
 * of each gas sensor, then perform check on each one's latest reading
 * @return {undefined}
 */
function checkGasSensors() {
    $.ajax({
        url: "http://shed.kent.ac.uk/devices",
        type: "GET"
    }).done(function (data) {
        data.gas.forEach(checkLatestGasSensorReading);
    }).fail(function () {
        alert("checkGasSensors Failed");
    });
}

function updateLuxDashboardElement(siteId, value, hasThreshold, lowerBound, upperBound) {
    var $dataEl = $("#" + siteId + "-lux");
    var $parentEl = $dataEl.parent(); // li element

    $parentEl.removeClass("normal");
    $parentEl.removeClass("warning");
    $parentEl.removeClass("grey");

    if (hasThreshold) {
        if (value >= lowerBound && value <= upperBound) {
            $dataEl.html(value + " lux");
            $parentEl.addClass("normal");
        } else if (value < lowerBound / 2) {
            $dataEl.html(value + " lux - very low light");
            $parentEl.addClass("danger");
        } else if (value < lowerBound) {
            $dataEl.html(value + " lux - low light");
            $parentEl.addClass("warning");
        } else if (value > upperBound * 2) {
            $dataEl.html(value + " lux - far too much light");
            $parentEl.addClass("danger");
        } else if (value > upperBound) {
            $dataEl.html(value + " lux - too much light");
            $parentEl.addClass("warning");
        }
    } else {
        $dataEl.html(value + " lux");
        $parentEl.addClass("normal");
    }
}

function updateLuxDashboardElementError(siteId) {
    var $dataEl = $("#" + siteId + "-lux");
    var $parentEl = $dataEl.parent(); // li element

    $parentEl.removeClass("normal");
    $parentEl.removeClass("warning");
    $parentEl.removeClass("grey");

    $dataEl.html("Error with server. Please wait 1 minute or refresh.");
    $parentEl.addClass("grey");
}

// Lux value should always be positive, discard negative values
function positiveLux(value) {
    return value > 0 ? value : 0;
}

function updateDaylightIndicators(isNight, sunrise, sunset) {
    $("#sunrise").html(toShortTimeString(sunrise));
    $("#sunset").html(toShortTimeString(sunset));

    $("#daylight-icon").html(isNight ? "brightness_3" : "wb_sunny");
    $("#daylight-text").html(isNight ? "night" : "day");
}

function checkLuxSensors() {
    $.ajax({
        url: "https://api.sunrise-sunset.org/json?lat=51.2802&lng=1.0789&formatted=0",
        type: "GET"
    }).done(function(ssData) {
        var now = new Date(Date.now());
        var sunrise = new Date(ssData.results.sunrise);
        var sunset = new Date(ssData.results.sunset);
        var isNight = now < sunrise || now > sunset;

        updateDaylightIndicators(isNight, sunrise, sunset);

        var rate = "minute";

        var gh1plantzone = getSensorDataAjax("gh1_plantzone_1_lux", rate);
        var gh1northdoor = getSensorDataAjax("gh1_north_door_lux", rate);
        var gh1southdoor = getSensorDataAjax("gh1_south_door_lux", rate);
    
        var gh2plantzone = getSensorDataAjax("gh2_plantzone_1_lux", rate);
        var gh2northdoor = getSensorDataAjax("gh2_north_door_lux", rate);
        var gh2southdoor = getSensorDataAjax("gh2_south_door_lux", rate);
        var gh2mains = getSensorDataAjax("gh2_mains_lux", rate);
    
        var gh3seed = getSensorDataAjax("gh3_seed_lux", rate);
        var gh3eastdoor = getSensorDataAjax("gh3_east_door_lux", rate);
        var gh3westdoor = getSensorDataAjax("gh3_west_door_lux", rate);
    
        var house = getSensorDataAjax("house_store_lux", rate);
        var outside = getSensorDataAjax("outside_field_lux", rate);       
    
        $.when(gh1plantzone, gh1northdoor, gh1southdoor).then(function (pzData, ndData, sdData) {
            var avg = 0;          
    
            if (pzData[0].light_value.length > 0) {
                avg += positiveLux(pzData[0].light_value[pzData[0].light_value.length - 1][1]);
                avg += positiveLux(ndData[0].light_value[ndData[0].light_value.length - 1][1]);
                avg += positiveLux(sdData[0].light_value[sdData[0].light_value.length - 1][1]);
    
                avg /= 3;
    
                avg = Number((avg).toFixed(3));

                var lb = 10000;

                if(avg < lb/2 && !isNight) {
                    sendEmail("Greenhouse 1 insufficient light warning", "There is not enough light in greenhouse 1. Current value: " + avg + " lux, minimum " + lb + " lux", pzData[0].id);
                }
    
                updateLuxDashboardElement(pzData[0].site_id, avg, true, lb); // approx sunlight
            } else {
                console.log("Empty data for " + pzData[0].site_id);
                updateLuxDashboardElementError(pzData[0].site_id);
            }
        }, function (error) {
            console.log(error);
        });
    
        $.when(gh2plantzone, gh2northdoor, gh2southdoor, gh2mains).then(function (pzData, ndData, sdData, mData) {
            var avg = 0;
    
            if (pzData[0].light_value.length > 0) {
                avg += positiveLux(pzData[0].light_value[pzData[0].light_value.length - 1][1]);
                avg += positiveLux(ndData[0].light_value[ndData[0].light_value.length - 1][1]);
                avg += positiveLux(sdData[0].light_value[sdData[0].light_value.length - 1][1]);
                avg += positiveLux(mData[0].light_value[mData[0].light_value.length - 1][1]);
    
                avg /= 4;
    
                avg = Number((avg).toFixed(3));
                
                var lb = 5000;
                var ub = 15000;

                if(avg < lb/2 && !isNight) {
                    sendEmail("Greenhouse 2 insufficient light warning", "There is not enough light in greenhouse 2. Current value: " + avg + " lux, minimum " + lb + " lux", pzData[0].id);
                }
                else if (avg > ub*2 && !isNight) {
                    sendEmail("Greenhouse 2 excessive light warning", "There is too much light in greenhouse 2. Current value: " + avg + " lux, maximum " + lb + " lux", pzData[0].id);
                }
    
                updateLuxDashboardElement(pzData[0].site_id, avg, true, lb, ub); // approx low sunlight            
            } else {
                console.log("Empty data for " + pzData[0].site_id);
                updateLuxDashboardElementError(pzData[0].site_id);
            }
        }, function (error) {
            console.log(error);
        });
    
        $.when(gh3eastdoor, gh3westdoor, gh3seed).then(function (edData, wdData, sData) {
            var avg = 0;
    
            if (edData[0].light_value.length > 0) {
                avg += positiveLux(edData[0].light_value[edData[0].light_value.length - 1][1]);
                avg += positiveLux(wdData[0].light_value[wdData[0].light_value.length - 1][1]);
                avg += positiveLux(sData[0].light_value[sData[0].light_value.length - 1][1]);
    
                avg /= 3;
    
                avg = Number((avg).toFixed(3));

                var lb = 6000;
                var ub = 12000;

                if(avg < lb/2 && !isNight) {
                    sendEmail("Greenhouse 3 insufficient light warning", "There is not enough light in greenhouse 3. Current value: " + avg + " lux, minimum " + lb + " lux", edData[0].id);
                }
                else if (avg > ub*2 && !isNight) {
                    sendEmail("Greenhouse 3 excessive light warning", "There is too much light in greenhouse 3. Current value: " + avg + " lux, maximum " + lb + " lux", edData[0].id);
                }
    
                updateLuxDashboardElement(edData[0].site_id, avg, true, lb, ub); // "carefully-controlled???"            
            } else {
                console.log("Empty data for " + edData[0].site_id);
                updateLuxDashboardElementError(edData[0].site_id);
            }
        }, function (error) {
            console.log(error);
        });
    
        $.when(house).then(function (data) {
            if (data.light_value.length > 0) {
                var index = data.light_value.length - 1;
                var value = positiveLux(data.light_value[index][1]);
    
                value = Number((value).toFixed(3));

                var lb = 10;
                var ub = 100;

                if(value < lb/2 && !isNight) {
                    sendEmail("Storeroom insufficient light warning", "There is not enough light in the storeroom. Current value: " + value + " lux, minimum " + lb + " lux", data.id);
                }
                else if (value > ub*2 && !isNight) {
                    sendEmail("Storeroom excessive light warning", "There is too much light in the storeroom. Current value: " + avg + " lux, maximum " + lb + " lux", data.id);
                }
    
                updateLuxDashboardElement(data.site_id, value, true, lb, ub);
            } else {
                console.log("Empty data for " + data.site_id);
                updateLuxDashboardElementError(data.site_id);
            }
        }, function (error) {
            console.log(error);
        });
    
        $.when(outside).then(function (data) {
            if (data.light_value.length > 0) {
                var index = data.light_value.length - 1;
                var value = positiveLux(data.light_value[index][1]);
    
                value = Number((value).toFixed(3));

                var lb = 5000;
                var ub = 12000;

                if(value < lb/2 && !isNight) {
                    sendEmail("Root crops insufficient light warning", "There is not enough light on the root crops. Current value: " + value + " lux, minimum " + lb + " lux", data.id);
                }
                else if (value > ub*2 && !isNight) {
                    sendEmail("Root crops excessive light warning", "There is too much light on the root crops. Current value: " + avg + " lux, maximum " + lb + " lux", data.id);
                }
    
                updateLuxDashboardElement(data.site_id, value, true, lb, ub);
            } else {
                console.log("Empty data for " + data.site_id);
                updateLuxDashboardElementError(data.site_id);
            }
        }, function (error) {
            console.log(error);
        });
    });    
}

function getSensorDataAjax(sensorId, rate) {
    var url = "http://shed.kent.ac.uk/device/" + sensorId + "/" + rate;
    return $.ajax({
        url: url,
        type: "GET"
    });
}

function toShortDateString(date) {
    var tempMonth = date.getMonth() + 1;
    var day = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
    var month = tempMonth < 10 ? "0" + tempMonth : tempMonth;
    var hour = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
    var minute = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();

    return day + "/" + month + ", " + hour + ":" + minute;
}

function toShortTimeString(date) {
    var hour = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
    var minute = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();

    return hour + ":" + minute;
}

// GH1 Lux
function getGh1LuxData() {
    var rate = "minute";

    var plantzone = getSensorDataAjax("gh1_plantzone_1_lux", rate);
    var northDoor = getSensorDataAjax("gh1_north_door_lux", rate);
    var southDoor = getSensorDataAjax("gh1_south_door_lux", rate);

    // get all data
    var data;
    $.when(plantzone, northDoor, southDoor).then(function (pzData, ndData, sdData) {
        data = {
            plantzone: pzData[0].light_value,
            northDoor: ndData[0].light_value,
            southDoor: sdData[0].light_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yP = [];
        var yN = [];
        var yS = [];

        var j = 0;
        for (var i = 0; i < data.plantzone.length; i += 25) {
            x[j] = toShortDateString(new Date(data.plantzone[i][0]));

            yP[j] = positiveLux(data.plantzone[i][1]);
            yN[j] = positiveLux(data.northDoor[i][1]);
            yS[j] = positiveLux(data.southDoor[i][1]);

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Plant Zone",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yP,
                        fill: false
                    },
                    {
                        label: "North door",
                        backgroundColor: "orange",
                        borderColor: "orange",
                        data: yN,
                        fill: false
                    },
                    {
                        label: "South door",
                        backgroundColor: "purple",
                        borderColor: "purple",
                        data: yS,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 1 Lux"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Lux"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("lux-chart").getContext("2d");
        var luxChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

// GH2 Lux
function getGh2LuxData() {
    var rate = "minute";

    var plantzone = getSensorDataAjax("gh2_plantzone_1_lux", rate);
    var northDoor = getSensorDataAjax("gh2_north_door_lux", rate);
    var southDoor = getSensorDataAjax("gh2_south_door_lux", rate);
    var mains = getSensorDataAjax("gh2_mains_lux", rate);

    // get all data
    var data;
    $.when(plantzone, northDoor, southDoor, mains).then(function (pzData, ndData, sdData, mData) {
        data = {
            plantzone: pzData[0].light_value,
            northDoor: ndData[0].light_value,
            southDoor: sdData[0].light_value,
            mains: mData[0].light_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yP = [];
        var yN = [];
        var yS = [];
        var yM = [];

        var j = 0;
        for (var i = 0; i < data.plantzone.length; i += 25) {
            x[j] = toShortDateString(new Date(data.plantzone[i][0]));

            yP[j] = positiveLux(data.plantzone[i][1]);
            yN[j] = positiveLux(data.northDoor[i][1]);
            yS[j] = positiveLux(data.southDoor[i][1]);
            yM[j] = positiveLux(data.mains[i][1]);

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Plant Zone",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yP,
                        fill: false
                    },
                    {
                        label: "North door",
                        backgroundColor: "orange",
                        borderColor: "orange",
                        data: yN,
                        fill: false
                    },
                    {
                        label: "South door",
                        backgroundColor: "purple",
                        borderColor: "purple",
                        data: yS,
                        fill: false
                    },
                    {
                        label: "Mains",
                        backgroundColor: "blue",
                        borderColor: "blue",
                        data: yM,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 2 Lux"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Lux"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("lux-chart").getContext("2d");
        var luxChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

// GH3 Lux
function getGh3LuxData() {
    var rate = "minute";

    var seed = getSensorDataAjax("gh3_seed_lux", rate);
    var eastDoor = getSensorDataAjax("gh3_east_door_lux", rate);
    var westDoor = getSensorDataAjax("gh3_west_door_lux", rate);

    // get all data
    var data;
    $.when(seed, eastDoor, westDoor).then(function (sData, edData, wdData) {
        data = {
            seed: sData[0].light_value,
            eastDoor: edData[0].light_value,
            westDoor: wdData[0].light_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yS = [];
        var yE = [];
        var yW = [];

        var j = 0;
        for (var i = 0; i < data.seed.length; i += 25) {
            x[j] = toShortDateString(new Date(data.seed[i][0]));

            yS[j] = positiveLux(data.seed[i][1]);
            yE[j] = positiveLux(data.eastDoor[i][1]);
            yW[j] = positiveLux(data.westDoor[i][1]);

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Seed",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yS,
                        fill: false
                    },
                    {
                        label: "East door",
                        backgroundColor: "orange",
                        borderColor: "orange",
                        data: yE,
                        fill: false
                    },
                    {
                        label: "West door",
                        backgroundColor: "purple",
                        borderColor: "purple",
                        data: yW,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 3 Lux"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Lux"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("lux-chart").getContext("2d");
        var luxChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

// House Lux
function getHouseLuxData() {
    var rate = "minute";

    var house = getSensorDataAjax("house_store_lux", rate);

    // get all data
    var data;
    $.when(house).then(function (house) {
        data = {
            house: house.light_value
        };

        // x-axis
        var x = [];

        // y-axis
        var y = [];

        var j = 0;
        for (var i = 0; i < data.house.length; i += 25) {
            x[j] = toShortDateString(new Date(data.house[i][0]));

            y[j] = positiveLux(data.house[i][1]);

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "House",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: y,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Main House Lux"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Lux"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("lux-chart").getContext("2d");
        var luxChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

// Outside Lux
function getOutsideLuxData() {
    var rate = "minute";

    var outside = getSensorDataAjax("outside_field_lux", rate);

    // get all data
    var data;
    $.when(outside).then(function (outside) {
        data = {
            outside: outside.light_value
        };

        // x-axis
        var x = [];

        // y-axis
        var y = [];

        var j = 0;
        for (var i = 0; i < data.outside.length; i += 75) {
            x[j] = toShortDateString(new Date(data.outside[i][0]));

            y[j] = positiveLux(data.outside[i][1]);

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Outside",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: y,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Outdoor Beds Lux"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Lux"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("lux-chart").getContext("2d");
        var luxChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

//used to update the dashboard for temperature readings
function updateTempDashboardElement(siteId, value, minValue, maxValue, isMuck) {
    var id = siteId;

    //checks between outside muck heap and outside root crops
    if (siteId === "outside") {
        if (isMuck) {
            id = "muck";
        } else {
            id = "root";
        }
    }

    var $dataEl = $("#" + id + "-temp");
    var $parentEl = $dataEl.parent();

    $parentEl.removeClass("normal");
    $parentEl.removeClass("warning");

    //decides if the current value is with ideal range, dangerously outside range +/-5 degrees, or just outside of range.
    if (value >= minValue && value <= maxValue) {
        $dataEl.html(value + " &deg;C");
        $parentEl.addClass("normal");
    } else if (value < minValue -5) {
        $dataEl.html(value + " &deg;C   - Extremely Low Temperature");
        $parentEl.addClass("danger");
    } else if (value < minValue) {
        $dataEl.html(value + " &deg;C   - Low Temperature");
        $parentEl.addClass("warning");
    }else if (value > maxValue +5) {
        $dataEl.html(value + " &deg;C   - Extremely High Temperature");
        $parentEl.addClass("danger");
    }else if (value > maxValue) {
    $dataEl.html(value + " &deg;C   - High Temperature");
    $parentEl.addClass("warning");
}
}

//used to update the dashboard for humidity readings
function updateHumidDashboardElement(siteId, value, minValue, maxValue, isMuck) {
    var id = siteId;

    //checks between outside muck heap and outside root crops
    if (id == "outside") {
        if (isMuck == true) {
            id = "muck";
        } else if (isMuck == false) {
            id = "root";
        }
    }

    var $dataEl = $("#" + id + "-humid");
    var $parentEl = $dataEl.parent(); // li element

    $parentEl.removeClass("normal");
    $parentEl.removeClass("warning");

    //decides if the current value is with ideal range, dangerously outside range +/-10, or just outside of range.
    if (value >= minValue && value <= maxValue) {
        $dataEl.html(value + "%");
        $parentEl.addClass("normal");
    } else if (value < minValue -10) {
        $dataEl.html(value + "% - Extremely Low Humidity");
        $parentEl.addClass("danger");
    } else if (value < minValue) {
        $dataEl.html(value + "% - Low Humidity");
        $parentEl.addClass("warning");
    } else if (value > maxValue +10) {
        $dataEl.html(value + "% - Extremely High Humidity");
        $parentEl.addClass("danger");
    } else if (value > maxValue) {
        $dataEl.html(value + "% - High Humidity");
        $parentEl.addClass("warning")
    }
}



/*this function is called before updating the dashboard in order to check if readings are within the sensors range,
  if the sensor is reading in kelvins or celsius and convert accordingly. And also checks if any readings are coming back as "null"
  somtimes this occurs with the muck heap and root crop sensors, in which case it will itterate through the previous readings until
  it finds one that is not null
*/
function checkTempAcceptance(data, scale, div) {
    var value = data[data.length - 1];
    var range = {
        ub: scale === "K" ? 353.15 : 80,
        lb: scale === "K" ? 233.15 : -40
    };

    if (value[1] != null && value[1] >= range.lb && value[1] <= range.ub) {
        if (scale === "K") {
            return{
                data: value[1] - 273.15,
                div: 1
            };
        } else {
            return {
                data: value[1],
                div: 1
            };
        }
    } else if (value[1] == null) {
        var run = true;
        for (var i = data.length - 1; run && i >= 0; i--) {
            if (data[i][1] != null) {
                return {
                    data: data[i][1],
                    div: 1
                };
            }
        }
        return {
            data: 0,
            div: 0
        };
    }
}

// Same as the temperature checking function but for humidity
function checkHumidAcceptance(data, div) {
    var value = data[data.length - 1];
    if (value[1] != null && value[1] >= 0 && value[1] <= 100) {
        div += 1;
        return {
            data: value[1],
            div: 1
        };
    } else if (value[1] == null) {
        var run = true;
        for (var i = data.length - 1; run && i >= 0; i--) {
            if (data[i][1] != null) {
                return {
                    data: data[i][1],
                    div: 1
                };
            }
        }
        return {
            data: 0,
            div: 0
        };
    }
}


//this function updates all of the dashboard areas for Temperature and Humidity.
function checkTempSensors() {
    var rate = "minute"

    var gh1co2production = getSensorDataAjax("gh1_co2Production_temp", rate);
    var gh1southdoor = getSensorDataAjax("gh1_south_door_temp", rate);
    var gh1northdoor = getSensorDataAjax("gh1_north_door_temp", rate);
    var gh1plantzone = getSensorDataAjax("gh1_plantzone_1_temp", rate);

    var gh2northdoor = getSensorDataAjax("gh2_north_door_temp", rate);
    var gh2southdoor = getSensorDataAjax("gh2_south_door_temp", rate);
    var gh2mains = getSensorDataAjax("gh2_mains_temp", rate);
    var gh2plantzone = getSensorDataAjax("gh2_plantzone_1_temp", rate);

    var gh3eastdoor = getSensorDataAjax("gh3_east_door_temp", rate);
    var gh3seed = getSensorDataAjax("gh3_seed_temp", rate);
    var gh3westdoor = getSensorDataAjax("gh3_west_door_temp", rate);

    var housestore = getSensorDataAjax("house_store_temp", rate);
    var outsidefield = getSensorDataAjax("outside_field_temp", rate);
    var outsideheap = getSensorDataAjax("outside_heap_temp", rate);

    $.when(gh1co2production, gh1southdoor, gh1northdoor, gh1plantzone).then(function (coData, sdData, ndData, pzData) {
        var avgTemp = 0;
        var avgHumid = 0;
        var divTemp = 0;
        var divHumid = 0;

        var tempAcceptance = checkTempAcceptance(coData[0].temperature_value, coData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        var humidAcceptance = checkHumidAcceptance(coData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;

        tempAcceptance = checkTempAcceptance(sdData[0].temperature_value, sdData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(sdData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;

        tempAcceptance = checkTempAcceptance(ndData[0].temperature_value, ndData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(ndData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;

        tempAcceptance = checkTempAcceptance(pzData[0].temperature_value, pzData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(pzData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;


        avgTemp /= divTemp;
        avgHumid /= divHumid;
        avgTemp = Number((avgTemp).toFixed(1));
        avgHumid = Number((avgHumid).toFixed(1));

        /*checks the month and hour to see if the safe temp values need to be changed, since if it's a winter evening the
          ideal temperature of gh1 should be changed from 7-29 to 8-10 degrees.
        */ 
        var hour = [];
        var month = [];
        var minHumid = 0;
        var maxHumid = 40;
        var minTemp = 7;
        var maxTemp = 29;
        hour[0] = toShortDateString(new Date(coData[0].temperature_value[12][0]));
        hour[1] = toShortDateString(new Date(coData[0].temperature_value[13][0]));
        month[0] = toShortDateString(new Date(coData[0].temperature_value[6][0]));
        month[1] = toShortDateString(new Date(coData[0].temperature_value[7][0]));

        if (month === 12 || month === 01 || month === 02) {
            if (hour >= 20 && hour <= 6) {
                minTemp = 8;
                maxTemp = 10;
            }
        }
        updateTempDashboardElement(coData[0].site_id, avgTemp, minTemp, maxTemp);
        updateHumidDashboardElement(coData[0].site_id, avgHumid, minHumid, maxHumid);

    }, function (error) {
        console.log(error);
    });

    $.when(gh2northdoor, gh2southdoor, gh2mains, gh2plantzone).then(function (ndData, sdData, mData, pzData) {
        var avgTemp = 0;
        var avgHumid = 0;
        var divTemp = 0;
        var divHumid = 0;

        tempAcceptance = checkTempAcceptance(ndData[0].temperature_value, ndData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(ndData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;

        tempAcceptance = checkTempAcceptance(sdData[0].temperature_value, sdData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(sdData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;

        tempAcceptance = checkTempAcceptance(mData[0].temperature_value, mData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(mData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;

        tempAcceptance = checkTempAcceptance(pzData[0].temperature_value, pzData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(pzData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;


        avgTemp /= divTemp;
        avgHumid /= divHumid;
        avgTemp = Number((avgTemp).toFixed(1));
        avgHumid = Number((avgHumid).toFixed(1));

        updateTempDashboardElement(ndData[0].site_id, avgTemp, 7, 18);
        updateHumidDashboardElement(ndData[0].site_id, avgHumid, 40, 80);
    }, function (error) {
        console.log(error);
    });

    $.when(gh3eastdoor, gh3seed, gh3westdoor).then(function (edData, sData, wdData) {
        var avgTemp = 0;
        var avgHumid = 0;
        var divTemp = 0;
        var divHumid = 0;

        tempAcceptance = checkTempAcceptance(edData[0].temperature_value, edData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(edData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;

        tempAcceptance = checkTempAcceptance(sData[0].temperature_value, sData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(sData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;

        tempAcceptance = checkTempAcceptance(wdData[0].temperature_value, wdData[0].temp_scale, divTemp);
        avgTemp += tempAcceptance.data;
        divTemp += tempAcceptance.div;
        humidAcceptance = checkHumidAcceptance(wdData[0].humidity_value, divHumid);
        avgHumid += humidAcceptance.data;
        divHumid += humidAcceptance.div;


        avgTemp /= divTemp;
        avgHumid /= divHumid;
        avgTemp = Number((avgTemp).toFixed(1));
        avgHumid = Number((avgHumid).toFixed(1));

        updateTempDashboardElement(edData[0].site_id, avgTemp, 10, 26);
        updateHumidDashboardElement(edData[0].site_id, avgHumid, 30, 60);
    }, function (error) {
        console.log(error);
    });

    $.when(housestore).then(function (data) {
        var tempValue = checkTempAcceptance(data.temperature_value, data.temp_scale, 0).data;
        var humidValue = checkHumidAcceptance(data.humidity_value, 0).data;

        tempValue = Number((tempValue).toFixed(1));
        humidValue = Number((humidValue).toFixed(1));
        minHumid = 0;
        maxHumid = 40;
        minTemp = 5;
        maxTemp = 20;

        updateTempDashboardElement(data.site_id, tempValue, 5, 20, false);
        updateHumidDashboardElement(data.site_id, humidValue, 0, 40, false);
    }, function (error) {
        console.log(error);
    });

    $.when(outsidefield).then(function (data) {
        var tempValue = checkTempAcceptance(data.temperature_value, data.temp_scale, 0).data;
        var humidValue = checkHumidAcceptance(data.humidity_value, 0).data;

        tempValue = Number((tempValue).toFixed(1));
        humidValue = Number((humidValue).toFixed(1));

        updateTempDashboardElement(data.site_id, tempValue, 0, 15, false);
        updateHumidDashboardElement(data.site_id, humidValue, 20, 60, false);
    }, function (error) {
        console.log(error);
    });

    $.when(outsideheap).then(function (data) {
        var tempValue = checkTempAcceptance(data.temperature_value, data.temp_scale, 0).data;
        var humidValue = checkHumidAcceptance(data.humidity_value, 0).data;

        tempValue = Number((tempValue).toFixed(1));
        humidValue = Number((humidValue).toFixed(1));


        updateTempDashboardElement(data.site_id, tempValue, 35, 45, true);
        updateHumidDashboardElement(data.site_id, humidValue, 60, 100, true);
    }, function (error) {
        console.log(error);
    });
}

function getGh1TempGraph() {
    var rate = "10minute";

    var coTwoProduction = getSensorDataAjax("gh1_co2Production_temp", rate);
    var southDoor = getSensorDataAjax("gh1_south_door_temp", rate);
    var northDoor = getSensorDataAjax("gh1_north_door_temp", rate);
    var plantzone = getSensorDataAjax("gh1_plantzone_1_temp", rate);

    // get all data
    var data;
    $.when(coTwoProduction, southDoor, northDoor, plantzone).then(function (cData, sdData, ndData, pzData) {
        data = {
            coTwoProduction: cData[0].temperature_value,
            southDoor: sdData[0].temperature_value,
            northDoor: ndData[0].temperature_value,
            plantzone: pzData[0].temperature_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yC = [];
        var yS = [];
        var yN = [];
        var yP = [];

        var j = 0;
        for (var i = 0; i < data.plantzone.length; i += 12) {
            x[j] = toShortDateString(new Date(data.plantzone[i][0]));

            yC[j] = data.coTwoProduction[i][1];
            yS[j] = data.southDoor[i][1];
            yN[j] = data.northDoor[i][1];
            yP[j] = data.plantzone[i][1];

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Co2 Production",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yC,
                        fill: false
                    },
                    {
                        label: "South Door",
                        backgroundColor: "orange",
                        borderColor: "orange",
                        data: yS,
                        fill: false
                    },
                    {
                        label: "North Door",
                        backgroundColor: "purple",
                        borderColor: "purple",
                        data: yN,
                        fill: false
                    },
                    {
                        label: "Plant Zone",
                        backgroundColor: "red",
                        borderColor: "red",
                        data: yP,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 1 Temperature"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Celsius"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("temp-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

function getGh1HumidGraph() {
    var rate = "10minute";

    var coTwoProduction = getSensorDataAjax("gh1_co2Production_temp", rate);
    var southDoor = getSensorDataAjax("gh1_south_door_temp", rate);
    var northDoor = getSensorDataAjax("gh1_north_door_temp", rate);
    var plantzone = getSensorDataAjax("gh1_plantzone_1_temp", rate);

    // get all data
    var data;
    $.when(coTwoProduction, southDoor, northDoor, plantzone).then(function (cData, sdData, ndData, pzData) {
        data = {
            coTwoProduction: cData[0].temperature_value,
            southDoor: sdData[0].humidity_value,
            northDoor: ndData[0].humidity_value,
            plantzone: pzData[0].humidity_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yC = [];
        var yS = [];
        var yN = [];
        var yP = [];

        var j = 0;
        for (var i = 0; i < data.plantzone.length; i += 12) {
            x[j] = toShortDateString(new Date(data.plantzone[i][0]));

            yC[j] = data.coTwoProduction[i][1];
            yS[j] = data.southDoor[i][1];
            yN[j] = data.northDoor[i][1];
            yP[j] = data.plantzone[i][1];

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Co2 Production",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yC,
                        fill: false
                    },
                    {
                        label: "South Door",
                        backgroundColor: "orange",
                        borderColor: "orange",
                        data: yS,
                        fill: false
                    },
                    {
                        label: "North Door",
                        backgroundColor: "purple",
                        borderColor: "purple",
                        data: yN,
                        fill: false
                    },
                    {
                        label: "Plant Zone",
                        backgroundColor: "red",
                        borderColor: "red",
                        data: yP,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 1 Humidity"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Humidity %"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("humid-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

function getGh2TempGraph() {
    var rate = "10minute";

    var mainsTemp = getSensorDataAjax("gh2_mains_temp", rate);
    var southDoor = getSensorDataAjax("gh2_south_door_temp", rate);
    var northDoor = getSensorDataAjax("gh2_north_door_temp", rate);
    var plantzone = getSensorDataAjax("gh2_plantzone_1_temp", rate);

    // get all data
    var data;
    $.when(mainsTemp, southDoor, northDoor, plantzone).then(function (mtData, sdData, ndData, pzData) {
        data = {
            mainsTemp: mtData[0].temperature_value,
            southDoor: sdData[0].temperature_value,
            northDoor: ndData[0].temperature_value,
            plantzone: pzData[0].temperature_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yM = [];
        var yS = [];
        var yN = [];
        var yP = [];

        var j = 0;
        for (var i = 0; i < data.plantzone.length; i += 12) {
            x[j] = toShortDateString(new Date(data.plantzone[i][0]));

            yM[j] = data.mainsTemp[i][1];
            yS[j] = data.southDoor[i][1];
            yN[j] = data.northDoor[i][1];
            yP[j] = data.plantzone[i][1];

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Mains Temp",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yM,
                        fill: false
                    },
                    {
                        label: "South Door",
                        backgroundColor: "orange",
                        borderColor: "orange",
                        data: yS,
                        fill: false
                    },
                    {
                        label: "North Door",
                        backgroundColor: "purple",
                        borderColor: "purple",
                        data: yN,
                        fill: false
                    },
                    {
                        label: "Plant Zone",
                        backgroundColor: "red",
                        borderColor: "red",
                        data: yP,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 2 Temperature"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Celsius"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("temp-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

function getGh2HumidGraph() {
    var rate = "10minute";

    var mainsTemp = getSensorDataAjax("gh2_mains_temp", rate);
    var southDoor = getSensorDataAjax("gh2_south_door_temp", rate);
    var northDoor = getSensorDataAjax("gh2_north_door_temp", rate);
    var plantzone = getSensorDataAjax("gh2_plantzone_1_temp", rate);

    // get all data
    var data;
    $.when(mainsTemp, southDoor, northDoor, plantzone).then(function (mtData, sdData, ndData, pzData) {
        data = {
            mainsTemp: mtData[0].humidity_value,
            southDoor: sdData[0].humidity_value,
            northDoor: ndData[0].humidity_value,
            plantzone: pzData[0].humidity_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yM = [];
        var yS = [];
        var yN = [];
        var yP = [];

        var j = 0;
        for (var i = 0; i < data.plantzone.length; i += 12) {
            x[j] = toShortDateString(new Date(data.plantzone[i][0]));

            yM[j] = data.mainsTemp[i][1];
            yS[j] = data.southDoor[i][1];
            yN[j] = data.northDoor[i][1];
            yP[j] = data.plantzone[i][1];

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Mains Temp",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yM,
                        fill: false
                    },
                    {
                        label: "South Door",
                        backgroundColor: "orange",
                        borderColor: "orange",
                        data: yS,
                        fill: false
                    },
                    {
                        label: "North Door",
                        backgroundColor: "purple",
                        borderColor: "purple",
                        data: yN,
                        fill: false
                    },
                    {
                        label: "Plant Zone",
                        backgroundColor: "red",
                        borderColor: "red",
                        data: yP,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 2 Humidity"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Humidity %"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("humid-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

function getGh3TempGraph() {
    var rate = "10minute";

    var eastDoor = getSensorDataAjax("gh3_east_door_temp", rate);
    var westDoor = getSensorDataAjax("gh3_west_door_temp", rate);
    var seedTemp = getSensorDataAjax("gh3_seed_temp", rate);

    // get all data
    var data;
    $.when(eastDoor, westDoor, seedTemp).then(function (edData, wdData, stData) {
        data = {
            eastDoor: edData[0].temperature_value,
            westDoor: wdData[0].temperature_value,
            seedTemp: stData[0].temperature_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yE = [];
        var yW = [];
        var yS = [];

        var j = 0;
        for (var i = 0; i < data.eastDoor.length; i += 12) {
            x[j] = toShortDateString(new Date(data.eastDoor[i][0]));

            yE[j] = data.eastDoor[i][1];
            yW[j] = data.westDoor[i][1];
            yS[j] = data.seedTemp[i][1] - 273.15;
            yS[j] = Number((yS[j]).toFixed(1));

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "East Door",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yE,
                        fill: false
                    },
                    {
                        label: "West Door",
                        backgroundColor: "orange",
                        borderColor: "orange",
                        data: yW,
                        fill: false
                    },
                    {
                        label: "Seed Temp",
                        backgroundColor: "purple",
                        borderColor: "purple",
                        data: yS,
                        fill: false,
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 3 Temperature"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Celsius"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("temp-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

function getGh3HumidGraph() {
    var rate = "10minute";

    var eastDoor = getSensorDataAjax("gh3_east_door_temp", rate);
    var westDoor = getSensorDataAjax("gh3_west_door_temp", rate);
    var seedTemp = getSensorDataAjax("gh3_seed_temp", rate);

    // get all data
    var data;
    $.when(eastDoor, westDoor, seedTemp).then(function (edData, wdData, stData) {
        data = {
            eastDoor: edData[0].humidity_value,
            westDoor: wdData[0].humidity_value,
            seedTemp: stData[0].humidity_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yE = [];
        var yW = [];
        var yS = [];

        var j = 0;
        for (var i = 0; i < data.eastDoor.length; i += 12) {
            x[j] = toShortDateString(new Date(data.eastDoor[i][0]));

            yE[j] = data.eastDoor[i][1];
            yW[j] = data.westDoor[i][1];
            yS[j] = data.seedTemp[i][1];

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "East Door",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yE,
                        fill: false
                    },
                    {
                        label: "West Door",
                        backgroundColor: "orange",
                        borderColor: "orange",
                        data: yW,
                        fill: false
                    },
                    {
                        label: "Seed Temp",
                        backgroundColor: "purple",
                        borderColor: "purple",
                        data: yS,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 3 Humidity"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Humidity %"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("humid-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

function getHouseTempGraph() {
    var rate = "10minute";

    var houseStore = getSensorDataAjax("house_store_temp", rate);

    // get all data
    var data;
    $.when(houseStore).then(function (hsData) {
        data = {
            houseStore: hsData.temperature_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yH = [];

        var j = 0;
        for (var i = 0; i < data.houseStore.length; i += 12) {
            x[j] = toShortDateString(new Date(data.houseStore[i][0]));

            yH[j] = data.houseStore[i][1];

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "House Store",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yH,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "House Store Temperature"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Celsius"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("temp-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

function getHouseHumidGraph() {
    var rate = "10minute";

    var houseStore = getSensorDataAjax("house_store_temp", rate);

    // get all data
    var data;
    $.when(houseStore).then(function (hsData) {
        data = {
            houseStore: hsData.humidity_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yH = [];

        var j = 0;
        for (var i = 0; i < data.houseStore.length; i += 12) {
            x[j] = toShortDateString(new Date(data.houseStore[i][0]));

            yH[j] = data.houseStore[i][1];

            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "House Store",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yH,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "House Store Humidity"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Humidity %"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("humid-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

function getOutsideTempGraph() {
    var rate = "10minute";

    var outsideField = getSensorDataAjax("outside_field_temp", rate);
    var outsideHeap = getSensorDataAjax("outside_heap_temp", rate);
    // get all data
    var data;
    $.when(outsideField, outsideHeap).then(function (ofData, ohData) {
        data = {
            outsideField: ofData[0].temperature_value,
            outsideHeap: ohData[0].temperature_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yO = [];
        var yH = [];

        var j = 0;
        for (var i = 0; i < data.outsideField.length; i += 12) {
            x[j] = toShortDateString(new Date(data.outsideField[i][0]));

            yO[j] = data.outsideField[i][1];
            yH[j] = data.outsideHeap[i][1];
            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Root Crops",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yO,
                        fill: false
                    },
                    {
                        label: "Muck Heap",
                        backgroundColor: "red",
                        borderColor: "red",
                        data: yH,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Outside Temperature"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Celsius"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("temp-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}

function getOutsideHumidGraph() {
    var rate = "10minute";

    var outsideField = getSensorDataAjax("outside_field_temp", rate);
    var outsideHeap = getSensorDataAjax("outside_heap_temp", rate);
    // get all data
    var data;
    $.when(outsideField, outsideHeap).then(function (ofData, ohData) {
        data = {
            outsideField: ofData[0].humidity_value,
            outsideHeap: ohData[0].humidity_value
        };

        // x-axis
        var x = [];

        // y-axis
        var yO = [];
        var yH = [];

        var j = 0;
        for (var i = 0; i < data.outsideField.length; i += 12) {
            x[j] = toShortDateString(new Date(data.outsideField[i][0]));

            yO[j] = data.outsideField[i][1];
            yH[j] = data.outsideHeap[i][1];
            j++;
        }

        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Root Crops",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yO,
                        fill: false
                    },
                    {
                        label: "Muck Heap",
                        backgroundColor: "red",
                        borderColor: "red",
                        data: yH,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Outside Humidity"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Humidity %"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("humid-chart").getContext("2d");
        var tempChart = new Chart(ctx, config);

    }, function (error) {
        console.log(error);
    });
}


function getGh1HydrometerData() {
    var rate = "minute";
    var plantzone = getSensorDataAjax("gh1_plantzone_1_moisture", rate);

    $.when(plantzone).then(function (pzData) {

        data = {
            plantzone: pzData.moisture_value


        };
        var x = [];
        var y = [];
        var j = 0;
        var average = 0;
        var cycleCount = 0;
        var previousValue = data.plantzone[0][1];
        var currentVal = 0;

        for (var i = 0; i < data.plantzone.length && i <= 2880; i += 59) {
            currentVal = data.plantzone[i][1];
            if (previousValue - currentVal >= 5 || previousValue - currentVal <= -5) { // if the gap is too large (i.e erroneous data)
                if (j > 2) {
                    var replaceWith = y[j - 2];
                    y[j - 1] = replaceWith;
                } else {
                    var replaceWith = currentVal;
                    y[j - 1] = replaceWith;
                }
            }
            x[j] = toShortDateString(new Date(data.plantzone[i][0]));
            y[j] = data.plantzone[i][1];
            average = average + data.plantzone[i][1];
            previousValue = data.plantzone[i][1];
            cycleCount = cycleCount + 1;
            j++;
        }


        average = average / cycleCount;

        //Bar Chart                
        var horizonalLinePlugin = {
            afterDatasetDraw: function (chartInstance) {
                var yScale = chartInstance.scales["y-axis-0"];
                var canvas = chartInstance.chart;
                var ctx = canvas.ctx;
                var index, line, style, width;
                if (chartInstance.options.horizontalLine) {
                    for (index = 0; index < chartInstance.options.horizontalLine.length; index++) {
                        line = chartInstance.options.horizontalLine[index];
                        style = (line.style) ? line.style : "rgba(169,169,169, .6)";
                        yValue = (line.y) ? yScale.getPixelForValue(line.y) : 0;
                        ctx.lineWidth = (line.width) ? line.width : 3;
                        if (yValue) {
                            ctx.beginPath();
                            ctx.moveTo(chartInstance.chartArea.left, yValue);
                            ctx.lineTo(canvas.width, yValue);
                            ctx.strokeStyle = style;
                            ctx.stroke();
                        }
                        if (line.text) {
                            ctx.fillStyle = style;
                            ctx.fillText(line.text, 0, yValue + ctx.lineWidth);
                        }
                    }
                    return;
                }
            }
        };

        Chart.pluginService.register(horizonalLinePlugin);


        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Plant Zone",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: y,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 1 Soil moisture past 24 hours"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                horizontalLine: [{
                        y: 15,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "max"
                    }],
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Lux"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("hydro-chart").getContext("2d");
        var hydroChart = new Chart(ctx, config);

        var ctx = document.getElementById("hydro-chartAverage").getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["Plant Zone average soil moisture "],
                datasets: [{
                        label: '% soil moisture',
                        data: [average],
                        backgroundColor: [
                            'rgba(114, 175, 237, 0.51)'

                        ],
                        borderColor: [
                            'rgba(114, 175, 237, 0.51)'

                        ],
                        borderWidth: 1
                    }]
            },
            options: {
                scales: {
                    yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                suggestedMax: 20
                            }
                        }]
                },
                title: {
                    display: true,
                    text: "Average soil moisture over the past 24 hours"
                },
                horizontalLine: [{
                        y: 15,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "max"
                    }, {
                        y: 3,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "min"
                    }]

            }
        });

    }, function (error) {
        console.log(error);
    });
}

function getGh2HydrometerData() {
    var rate = "minute";
    var plantzone = getSensorDataAjax("gh2_plantzone_1_moisture", rate);
    var mains = getSensorDataAjax("gh2_mains_moisture", rate);

    $.when(plantzone, mains).then(function (pzData, mData) {

        data = {
            plantzone: pzData[0].moisture_value,
            mains: mData[0].moisture_value


        };

        var x = [];
        var yPlantzone = [];
        var yMains = [];
        var j = 0;
        var averagePlantzone = 0;
        var averageMains = 0;
        var cycleCount = 0;
        var previousPlantzoneValue = data.plantzone[0][1];
        var previousMainsValue = data.mains[0][1];
        var currentValPlantzone = 0;
        var currentValMains = 0;

        for (var i = 0; i < data.plantzone.length && i < data.mains.length && i <= 2880; i += 59) {
            currentValPlantzone = data.plantzone[i][1];
            if (previousPlantzoneValue - currentValPlantzone >= 5 || previousPlantzoneValue - currentValPlantzone <= -5) { // if the gap is too large (i.e erroneous data)
                if (j > 2) {
                    var replaceWith = yPlantzone[j - 2];
                    yPlantzone[j - 1] = replaceWith;
                } else {
                    var replaceWith = currentValPlantzone;
                    yPlantzone[j - 1] = replaceWith;
                }
            }
            currentValMains = data.mains[i][1];
            if (previousMainsValue - currentValMains >= 5 || previousMainsValue - currentValMains <= -5) { // if the gap is too large (i.e erroneous data)
                if (j > 2) {
                    var replaceWith = yMains[j - 2];
                    yMains[j - 1] = replaceWith;
                } else {
                    var replaceWith = currentValMains;
                    yMains[j - 1] = replaceWith;
                }
            }

            x[j] = toShortDateString(new Date(data.plantzone[i][0]));
            yPlantzone[j] = data.plantzone[i][1];
            yMains[j] = data.mains[i][1];
            averagePlantzone = averagePlantzone + data.plantzone[i][1];
            averageMains = averageMains + data.mains[i][1];
            previousPlantzoneValue = data.plantzone[i][1];
            previousMainsValue = data.mains[i][1];
            cycleCount = cycleCount + 1;
            j++;
        }


        averagePlantzone = averagePlantzone / cycleCount;
        averageMains = averageMains / cycleCount;

        //Bar Chart                
        var horizonalLinePlugin = {
            afterDatasetDraw: function (chartInstance) {
                var yScale = chartInstance.scales["y-axis-0"];
                var canvas = chartInstance.chart;
                var ctx = canvas.ctx;
                var index, line, style, width;
                if (chartInstance.options.horizontalLine) {
                    for (index = 0; index < chartInstance.options.horizontalLine.length; index++) {
                        line = chartInstance.options.horizontalLine[index];
                        style = (line.style) ? line.style : "rgba(169,169,169, .6)";
                        yValue = (line.y) ? yScale.getPixelForValue(line.y) : 0;
                        ctx.lineWidth = (line.width) ? line.width : 3;
                        if (yValue) {
                            ctx.beginPath();
                            ctx.moveTo(chartInstance.chartArea.left, yValue);
                            ctx.lineTo(canvas.width, yValue);
                            ctx.strokeStyle = style;
                            ctx.stroke();
                        }
                        if (line.text) {
                            ctx.fillStyle = style;
                            ctx.fillText(line.text, 0, yValue + ctx.lineWidth);
                        }
                    }
                    return;
                }
            }
        };

        Chart.pluginService.register(horizonalLinePlugin);


        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Plant Zone",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: yPlantzone,
                        fill: false
                    }, {
                        label: "Mains",
                        backgroundColor: "blue",
                        borderColor: "blue",
                        data: yMains,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 2 Soil moisture past 24 hours"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                horizontalLine: [{
                        y: 15,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "max"
                    }],
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Soil moisture"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("hydro-chart").getContext("2d");
        var hydroChart = new Chart(ctx, config);

        var ctx = document.getElementById("hydro-chartAverage").getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["Plantzone average soil moisture", "Mains average soil moisture"],
                datasets: [{
                        label: 'Plant Zone soil moisture %',
                        data: [averagePlantzone],
                        backgroundColor: [
                            'rgba(101, 230, 165, 0.7)'

                        ],
                        borderColor: [
                            'rgba(101, 230, 165, 0.7)'

                        ],
                        borderWidth: 1
                    }, {
                        label: 'Mains soil moisture %',
                        data: [averageMains],
                        backgroundColor: [
                            'rgba(114, 175, 237, 0.51)'

                        ],
                        borderColor: [
                            'rgba(114, 175, 237, 0.51)'

                        ],
                        borderWidth: 1
                    }]
            },
            options: {
                scales: {
                    yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                suggestedMax: 40
                            }
                        }]
                },
                title: {
                    display: true,
                    text: "Average soil moisture over the past 24 hours"
                },
                horizontalLine: [{
                        y: 35,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "max"
                    }, {
                        y: 10,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "min"
                    }]

            }
        });

    }, function (error) {
        console.log(error);
    });
}

function getGh3HydrometerData() {
    var rate = "minute";
    var plantzone = getSensorDataAjax("gh3_seed_moisture", rate);

    $.when(plantzone).then(function (pzData) {

        data = {
            plantzone: pzData.moisture_value


        };
        var x = [];
        var y = [];
        var j = 0;
        var average = 0;
        var cycleCount = 0;
        var previousValue = data.plantzone[0][1];
        var currentVal = 0;

        for (var i = 0; i < data.plantzone.length && i <= 2880; i += 59) {
            currentVal = data.plantzone[i][1];
            if (previousValue - currentVal >= 5 || previousValue - currentVal <= -5) { // if the gap is too large (i.e erroneous data)
                if (j > 2) {
                    var replaceWith = y[j - 2];
                    y[j - 1] = replaceWith;
                } else {
                    var replaceWith = currentVal;
                    y[j - 1] = replaceWith;
                }
            }
            x[j] = toShortDateString(new Date(data.plantzone[i][0]));
            y[j] = data.plantzone[i][1];
            average = average + data.plantzone[i][1];
            previousValue = data.plantzone[i][1];
            cycleCount = cycleCount + 1;
            j++;
        }


        average = average / cycleCount;

        //Bar Chart                
        var horizonalLinePlugin = {
            afterDatasetDraw: function (chartInstance) {
                var yScale = chartInstance.scales["y-axis-0"];
                var canvas = chartInstance.chart;
                var ctx = canvas.ctx;
                var index, line, style, width;
                if (chartInstance.options.horizontalLine) {
                    for (index = 0; index < chartInstance.options.horizontalLine.length; index++) {
                        line = chartInstance.options.horizontalLine[index];
                        style = (line.style) ? line.style : "rgba(169,169,169, .6)";
                        yValue = (line.y) ? yScale.getPixelForValue(line.y) : 0;
                        ctx.lineWidth = (line.width) ? line.width : 3;
                        if (yValue) {
                            ctx.beginPath();
                            ctx.moveTo(chartInstance.chartArea.left, yValue);
                            ctx.lineTo(canvas.width, yValue);
                            ctx.strokeStyle = style;
                            ctx.stroke();
                        }
                        if (line.text) {
                            ctx.fillStyle = style;
                            ctx.fillText(line.text, 0, yValue + ctx.lineWidth);
                        }
                    }
                    return;
                }
            }
        };

        Chart.pluginService.register(horizonalLinePlugin);


        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Seeds",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: y,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Greenhouse 3 Soil moisture past 24 hours"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                horizontalLine: [{
                        y: 14,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "max"
                    }],
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Lux"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("hydro-chart").getContext("2d");
        var hydroChart = new Chart(ctx, config);

        var ctx = document.getElementById("hydro-chartAverage").getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["Average soil moisture"],
                datasets: [{
                        label: '% soil moisture',
                        data: [average],
                        backgroundColor: [
                            'rgba(114, 175, 237, 0.51)'

                        ],
                        borderColor: [
                            'rgba(114, 175, 237, 0.51)'

                        ],
                        borderWidth: 1
                    }]
            },
            options: {
                scales: {
                    yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                suggestedMax: 20
                            }
                        }]
                },
                title: {
                    display: true,
                    text: "Average soil moisture over the past 24 hours"
                },
                horizontalLine: [{
                        y: 14,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "max"
                    }, {
                        y: 10,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "min"
                    }]

            }
        });

    }, function (error) {
        console.log(error);
    });
}

function getOutdoorHydrometerData() {
    var rate = "minute";
    var plantzone = getSensorDataAjax("outside_field_moisture", rate);

    $.when(plantzone).then(function (pzData) {

        data = {
            plantzone: pzData.moisture_value


        };
        var x = [];
        var y = [];
        var j = 0;
        var average = 0;
        var cycleCount = 0;
        var previousValue = data.plantzone[0][1];
        var currentVal = 0;

        for (var i = 0; i < data.plantzone.length && i <= 2880; i += 59) {
            currentVal = data.plantzone[i][1];
            if (previousValue - currentVal >= 10 || previousValue - currentVal <= -10) { // if the gap is too large (i.e erroneous data)
                if (j > 2) {
                    var replaceWith = y[j - 2];
                    y[j - 1] = replaceWith;
                } else {
                    var replaceWith = currentVal;
                    y[j - 1] = replaceWith;
                }
            }
            x[j] = toShortDateString(new Date(data.plantzone[i][0]));
            y[j] = data.plantzone[i][1];
            average = average + data.plantzone[i][1];
            previousValue = data.plantzone[i][1];
            cycleCount = cycleCount + 1;
            j++;
        }


        average = average / cycleCount;

        //Bar Chart                
        var horizonalLinePlugin = {
            afterDatasetDraw: function (chartInstance) {
                var yScale = chartInstance.scales["y-axis-0"];
                var canvas = chartInstance.chart;
                var ctx = canvas.ctx;
                var index, line, style, width;
                if (chartInstance.options.horizontalLine) {
                    for (index = 0; index < chartInstance.options.horizontalLine.length; index++) {
                        line = chartInstance.options.horizontalLine[index];
                        style = (line.style) ? line.style : "rgba(169,169,169, .6)";
                        yValue = (line.y) ? yScale.getPixelForValue(line.y) : 0;
                        ctx.lineWidth = (line.width) ? line.width : 3;
                        if (yValue) {
                            ctx.beginPath();
                            ctx.moveTo(chartInstance.chartArea.left, yValue);
                            ctx.lineTo(canvas.width, yValue);
                            ctx.strokeStyle = style;
                            ctx.stroke();
                        }
                        if (line.text) {
                            ctx.fillStyle = style;
                            ctx.fillText(line.text, 0, yValue + ctx.lineWidth);
                        }
                    }
                    return;
                }
            }
        };

        Chart.pluginService.register(horizonalLinePlugin);


        var config = {
            type: "line",
            data: {
                labels: x,
                datasets: [{
                        label: "Seeds",
                        backgroundColor: "green",
                        borderColor: "green",
                        data: y,
                        fill: false
                    }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: "Field Soil moisture past 24 hours"
                },
                tooltips: {
                    mode: "index",
                    intersect: false
                },
                hover: {
                    mode: "nearest",
                    intersect: true
                },
                horizontalLine: [{
                        y: 14,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "max"
                    }],
                scales: {
                    xAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Time"
                        }
                    },
                    yAxes: {
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: "Lux"
                        }
                    }
                }
            }
        };

        var ctx = document.getElementById("hydro-chart").getContext("2d");
        var hydroChart = new Chart(ctx, config);

        var ctx = document.getElementById("hydro-chartAverage").getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ["Average soil moisture"],
                datasets: [{
                        label: '% soil moisture',
                        data: [average],
                        backgroundColor: [
                            'rgba(114, 175, 237, 0.51)'

                        ],
                        borderColor: [
                            'rgba(114, 175, 237, 0.51)'

                        ],
                        borderWidth: 1
                    }]
            },
            options: {
                scales: {
                    yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                suggestedMax: 100
                            }
                        }]
                },
                title: {
                    display: true,
                    text: "Average soil moisture over the past 24 hours"
                },
                horizontalLine: [{
                        y: 80,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "max"
                    }, {
                        y: 50,
                        "style": "rgba(255, 0, 0, .4)",
                        text: "min"
                    }]

            }
        });

    }, function (error) {
        console.log(error);
    });
}



function getLast30MinutesGH1Hydrometer(shouldReturn) {
    var rate = "minute";
    var plantzone = getSensorDataAjax("gh1_plantzone_1_moisture", rate);
    var average = 0;

    $.when(plantzone).then(function (pzData) {

        var x = [];
        var y = [];
        var j = 0;

        var cycleCount = 0;
        for (var i = 0; i < pzData.moisture_value.length && i <= 60; i++) {

            average = average + pzData.moisture_value[i][1];
        }
        average = average / 60;

        if (average > 30) {
            sendEmail("Greenhouse 1 soil moisture warning: EXTREMELY WET", "The soil in greenhouse 1 is too WET. The soil moisture content is currently at " + average + "% when it should be at maximum 15%");
        }

        if (average < 1) {
            sendEmail("Greenhouse 1 soil moisture warning: EXTREMELY DRY", "The soil in greenhouse 1 is too DRY. The soil moisture content is currently at " + average + "% when it should be at minimum 3%");
        }

        if (shouldReturn) {

            return average;
        }

    }, function (error) {
        console.log(error);
    });


}

function getLast30MinutesGH2Hydrometer(shouldReturn) {

    var rate = "minute";
    var plantzone = getSensorDataAjax("gh2_plantzone_1_moisture", rate);
    var mains = getSensorDataAjax("gh2_mains_moisture", rate);
    var averageZone = 0;
    var averageMains = 0;


    $.when(plantzone, mains).then(function (pzData, mainsData) {

        var yZone = [];
        var yMains = [];
        var j = 0;

        var cycleCount = 0;
        for (var i = 0; i < pzData[0].moisture_value.length && i < mainsData[0].moisture_value.length && i <= 60; i++) {
            averageZone = averageZone + pzData[0].moisture_value[i][1];
            averageMains = averageMains + mainsData[0].moisture_value[i][1];
        }
        averageZone = averageZone / 60;
        averageMains = averageMains / 60;


        if (averageZone > 70) {
            sendEmail("Greenhouse 2 plantzone soil moisture warning: EXTREMELY WET", "The soil in greenhouse 2 plantzone is too WET. The soil moisture content is currently at " + averageZone + "% when it should be at maximum 15%");
        }

        if (averageZone < 5) {
            sendEmail("Greenhouse 2 plantzone soil moisture warning: EXTREMELY DRY", "The soil in greenhouse 2 plantzone is too DRY. The soil moisture content is currently at " + averageZone + "% when it should be at minimum 3%");

        }

        if (averageMains > 70) {
            sendEmail("Greenhouse 2 mains soil moisture warning: EXTREMELY WET", "The soil in greenhouse 2 plantzone is too WET. The soil moisture content is currently at " + averageMains + "% when it should be at maximum 15%");
        }

        if (averageMains < 5) {
            sendEmail("Greenhouse 2 mains soil moisture warning: EXTREMELY DRY", "The soil in greenhouse 2 mains is too DRY. The soil moisture content is currently at " + averageMains + "% when it should be at minimum 3%");
        }

        if (shouldReturn) {
            var returnArray = [averageZone, averageMains];

            return returnArray;
        }



    }, function (error) {
        console.log(error);
    });


}

function getLast30MinutesGH3Hydrometer(shouldReturn) {
    var rate = "minute";
    var plantzone = getSensorDataAjax("gh3_seed_moisture", rate);
    var average = 0;

    $.when(plantzone).then(function (pzData) {
        var x = [];
        var y = [];
        var j = 0;

        var cycleCount = 0;
        for (var i = 0; i < pzData.moisture_value.length && i <= 60; i++) {
            average = average + pzData.moisture_value[i][1];
        }
        average = average / 60;

        if (average > 30) {
            sendEmail("Greenhouse 3 soil moisture warning: EXTREMELY WET", "The soil in greenhouse 3 is too WET. The soil moisture content is currently at " + average + "% when it should be at maximum 15%");
        }

        if (average < 5) {
            sendEmail("Greenhouse 3 soil moisture warning: EXTREMELY DRY", "The soil in greenhouse 1 is too DRY. The soil moisture content is currently at " + average + "% when it should be at minimum 3%");
        }

        if (shouldReturn) {
            return average;
        }

    }, function (error) {
        console.log(error);
    });


}

function getLast30MinutesOutdoorHydrometer(shouldReturn) {
    var rate = "minute";
    var plantzone = getSensorDataAjax("outside_field_moisture", rate);
    var average = 0;

    $.when(plantzone).done(function (pzData) {

        var x = [];
        var y = [];
        var j = 0;

        var cycleCount = 0;
        for (var i = 0; i < pzData.moisture_value.length && i <= 60; i++) {
            average = average + pzData.moisture_value[i][1];
        }
        average = average / 60;


        if (average > 90) {
            sendEmail("Field soil moisture warning: EXTREMELY WET", "The soil in the outdoor field is too WET. The soil moisture content is currently at " + average + "% when it should be at maximum 80%");
        }

        if (average < 25) {
            sendEmail("Field soil moisture warning: EXTREMELY DRY", "The soil in the outdoor field is too DRY. The soil moisture content is currently at " + average + "% when it should be at minimum 50%")
        }





    }, function (error) {
        console.log(error);
    });

    if (shouldReturn) {

        return average;
    }


}

function calculateAverages(ajaxObj, max, min, loationName) {

    var x = [];
    var y = [];
    var j = 0;
    var average = 0;

    var cycleCount = 0;
    for (var i = 0; i < ajaxObj[0].moisture_value.length && i <= 60; i++) {
        average = average + ajaxObj[0].moisture_value[i][1];
    }
    average = average / 60;


    if (average > max) {
        sendEmail("Field soil moisture warning: EXTREMELY WET", "The soil in the outdoor field is too WET. The soil moisture content is currently at " + average + "% when it should be at maximum 80%");
    }

    if (average < min) {
        sendEmail("Field soil moisture warning: EXTREMELY DRY", "The soil in the outdoor field is too DRY. The soil moisture content is currently at " + average + "% when it should be at minimum 50%")
    }
    return average;
}

function updateHydrometerDashboardElement() {
    var id = "";
    var displays = ["gh1-hydro", "gh2-hydro", "gh2-hydro2", "gh3-hydro", "crops-hydro"];
    var minimums = [3, 10, 10, 10, 50];
    var maximums = [15, 35, 35, 14, 80];
    var extremeMinimums = [1, 5, 5, 5, 25];
    var extremeMaximums = [30, 70, 70, 30, 90];
    var locationNames = ["Greenhouse 1", "Greenhouse 2 plantzone", "Greenhouse 2 mains", "Greenhouse 3", "Field"];

    var gh1Ajax = getSensorDataAjax("gh1_plantzone_1_moisture", "minute");
    var gh2Ajax = getSensorDataAjax("gh2_plantzone_1_moisture", "minute");
    var gh2Ajax2 = getSensorDataAjax("gh2_mains_moisture", "minute");
    var gh3Ajax = getSensorDataAjax("gh3_seed_moisture", "minute");
    var outdoorAverageAjax = getSensorDataAjax("outside_field_moisture", "minute");


    $.when(gh1Ajax, gh2Ajax, gh2Ajax2, gh3Ajax, outdoorAverageAjax).done(function (gh1, gh2PlantZone, gh2Mains, gh3, outdoor) {

        //account for the broken API returning empty lists/ null lists and no error message. This is necessary because 
        // we witnessed broken API behaviour with Lux sensor readings and got paranoid.

        var ajaxObjs = [gh1, gh2PlantZone, gh2Mains, gh3, outdoor];
        var objectNeedsToBeRemoved = false;

        for (var i = 0; i < ajaxObjs.length; i++) {
            id = displays[i];
            var ajaxBeingLookedAt = ajaxObjs[i];
            if (ajaxBeingLookedAt === null) {
                objectNeedsToBeRemoved = true;
            }
            if (ajaxBeingLookedAt[0].moisture_value.length === 0) { //
                objectNeedsToBeRemoved = true;
            }

            if (objectNeedsToBeRemoved === true) {
                var $dataEl = $("#" + id);
                var $parentEl = $dataEl.parent(); // li element
                $parentEl.removeClass("normal");
                $parentEl.removeClass("warning");
                $dataEl.html("Error with server. Please wait 30 mins or refresh");
                $parentEl.addClass("grey");
                //now remove this from all the later used lists so it doesn't get updated in the later calls. 
                ajaxObjs.splice(i, 1);
                displays.splice(i, 1);
                minimums.splice(i, 1);
                maximums.splice(i, 1);
                extremeMaximums.splice(i, 1);
                extremeMinimums.splice(i, 1);
                locationNames.splice(i, 1);
                i--;
            }
        }

        //END OF API ERROR CORRECTION. if the swagger gets patched then this will be removed

        var average = 0;

        for (var i = 0; i < displays.length; i++) {
            average = calculateAverages(ajaxObjs[i], maximums[i], minimums[i], locationNames[i]);
            id = displays[i];


            var $dataEl = $("#" + id);
            var $parentEl = $dataEl.parent(); // li element

            $parentEl.removeClass("normal");
            $parentEl.removeClass("warning");
            $parentEl.removeClass("danger");

            

            if (average >= minimums[i] && average <= maximums[i]) {

                $dataEl.html(Math.round(average) + " %");
                $parentEl.addClass("normal");
            } else {
                if (average < minimums[i]) {

                    $dataEl.html(Math.round(average) + " %   - Low moisture");
                    $parentEl.addClass("warning");
                    
                }
                if (average > maximums[i]) {

                    $dataEl.html(Math.round(average) + " %   - High moisture");
                    $parentEl.addClass("warning");
                    
                }
                if (average <= extremeMinimums[i]) {
                    $dataEl.html(Math.round(average) + " %   - Very low moisture");
                    $parentEl.addClass("danger");
                    sendEmail(locationNames[i] + " soil moisture warning: EXTREMELY DRY", "The soil in " + locationNames[i] + " is too WET. The soil moisture content is currently at " + average + "% when it should be at minimum " + minimums[i] + "%");
                }
                if (average >= extremeMaximums[i]) {
                    $dataEl.html(Math.round(average) + " %   - Very high moisture");
                    $parentEl.addClass("danger");
                    sendEmail(locationNames[i] + " soil moisture warning: EXTREMELY WET", "The soil in " + locationNames[i] + " is too WET. The soil moisture content is currently at " + average + "% when it should be at maximum " + maximums[i] + "%");
                }
            }
        }
    });
}